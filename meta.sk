function inLobby(p: player) :: boolean:
    if metadata "state" of {_p} is "lobby":
        return true
    else if metadata "state" of {_p} is "queued":
        send "&4&lGENRES &8| &7You are unable to do this because you are in queue. Use /leave to leave the queue." to {_p}
        return false
    else:
        send "&4&lGENRES &8| &7You are unable to do this because you are already in a game. Use /leave to leave the game." to {_p}
        return false

function toLobby(p: player):
    send "&4&lGENRES &8| &7You have left the world." to {_p}
    set metadata "state" of {_p} to "lobby"
    clean({_p})
    tpWorld({_p}, "spawn")
    set {_p}'s gamemode to survival

function addWinLoss(winner: player, loser: player):
    set {_wu} to {_winner}'s uuid
    set {_lu} to {_loser}'s uuid
    add 1 to {wins::%{_wu}%}
    add 1 to {losses::%{_lu}%}

function play(p: player, g: text):
    if inLobby({_p}) is true:
        set {_u} to {_p}'s uuid
        if {_g} is "straight":
            clean({_p})
            set metadata "state" of {_p} to "straight"
            cloneWorld("straight", "%{_p}%")
            reset_straight({_p})
            while metadata "state" of {_p} is "straight":
                set {_time} to {time.%{_p}%}
                send action bar "&7Time: &c%difference between now and {_time}% &8| &7PB: &c%{straight::%{_u}%} ? ""NaN""%" to {_p}
                wait 10 ticks
        else if {_g} is "parkour":
            clean({_p})
            set metadata "state" of {_p} to "parkour"
            cloneWorld("parkour", "%{_p}%")
            parkour({_p})
            while metadata "state" of {_p} is "parkour":
                send action bar "&7Jumps: &c%{jumps.%player%} ? 0%" to {_p}
                wait 10 ticks
        else if {_g} is "clutch":
            clean({_p})
            set metadata "state" of {_p} to "clutch"
            cloneWorld("clutch", "%{_p}%")
            reset_clutch({_p})
            while metadata "state" of {_p} is "clutch":
                set {_time} to {time.%{_p}%}
                send action bar "&7Time: &c%difference between now and {_time}% &8| &7PB: &c%{clutch::%{_u}%} ? ""NaN""%" to {_p}
                wait 10 ticks
        else if {_g} is "water":
            clean({_p})
            set metadata "state" of {_p} to "water"
            cloneWorld("water", "%{_p}%")
            reset_water({_p})
        else if {_g} is "tnt":
            clean({_p})
            set metadata "state" of {_p} to "tnt"
            cloneWorld("tnt", "%{_p}%")
            reset_tnt({_p})
        else if {_g} is "diagonal":
            clean({_p})
            set metadata "state" of {_p} to "diagonal"
            cloneWorld("diag", "%{_p}%")
            reset_diagonal({_p})
            while metadata "state" of {_p} is "diagonal":
                set {_time} to {time.%{_p}%}
                send action bar "&7Time: &c%difference between now and {_time}% &8| &7PB: &c%{diagonal::%{_u}%} ? ""NaN""%" to {_p}
                wait 10 ticks
        else if {_g} is "stick":
            clean({_p})
            set metadata "state" of {_p} to "queued"
            send "&4&lGENRES &8| &7Joined queue for &cstick&7." to {_p}
            add {_p} to {-queue.stick::*}
            if (size of {-queue.stick::*}) > 1:
                stick({-queue.stick::1}, {-queue.stick::2})
        else if {_g} is "pearl":
            clean({_p})
            set metadata "state" of {_p} to "queued"
            send "&4&lGENRES &8| &7Joined queue for &cpearl&7." to {_p} 
            add {_p} to {-queue.pearl::*}
            if (size of {-queue.pearl::*}) > 1:
                pearl({-queue.pearl::1}, {-queue.pearl::2})
        else if {_g} is "sumo":
            clean({_p})
            set metadata "state" of {_p} to "queued"
            send "&4&lGENRES &8| &7Joined queue for &csumo&7." to {_p} 
            add {_p} to {-queue.sumo::*}
            if (size of {-queue.sumo::*}) > 1:
                sumo({-queue.sumo::1}, {-queue.sumo::2})
        else if {_g} is "classic":
            clean({_p})
            set metadata "state" of {_p} to "queued"
            send "&4&lGENRES &8| &7Joined queue for &cclassic&7." to {_p} 
            add {_p} to {-queue.classic::*}
            if (size of {-queue.classic::*}) > 1:
                classic({-queue.classic::1}, {-queue.classic::2})
        else if {_g} is "bedwars":
            clean({_p})
            set metadata "state" of {_p} to "queued"
            send "&4&lGENRES &8| &7Joined queue for &cbedwars&7." to {_p} 
            add {_p} to {-queue.bedwars::*}
            if (size of {-queue.bedwars::*}) > 1:
                bedwars({-queue.bedwars::1}, {-queue.bedwars::2})
        else:
            send "&cDid not recognize gamemode." to {_p}

function quit(p: player):
    if metadata "state" of {_p} is "lobby":
        send "&4&lGENRES &8| &7You have nowhere else to go." to {_p}
        exit
    if metadata "state" of {_p} is "queued":
        remove {_p} from {-queue.stick::*}
        remove {_p} from {-queue.pearl::*}
        remove {_p} from {-queue.sumo::*}
        remove {_p} from {-queue.classic::*}
        remove {_p} from {-queue.bedwars::*}
        send "&4&lGENRES &8| &7You left the queue." to {_p}
        set metadata "state" of {_p} to "lobby"
        exit
    if metadata "state" of {_p} is "straight":
        delWorld("%{_p}%")
        delete {time.%{_p}%}
    if metadata "state" of {_p} is "parkour":
        delWorld("%{_p}%")
        delete {jumps.%{_p}%}
        delete {next.%{_p}%}
        delete {previous.%{_p}%}
    if metadata "state" of {_p} is "clutch":
        delWorld("%{_p}%")
        delete {time.%{_p}%}
    if metadata "state" of {_p} is "water":
        delWorld("%{_p}%")
    if metadata "state" of {_p} is "tnt":
        delWorld("%{_p}%")
    if metadata "state" of {_p} is "diagonal":
        delWorld("%{_p}%")
        delete {time.%{_p}%}
    if metadata "state" of {_p} is "stick":
        set {_enemy} to {enemy.%{_p}%}
        delete {enemy.%{_p}%}
        delete {enemy.%{_enemy}%}
        delete {lives.%{_p}%}
        delete {lives.%{_enemy}%}
        delete {loc.%{_p}%}
        delete {loc.%{_enemy}%}
        if "%{_p}'s world%" contains "%{_p}%":
            delWorld("%{_p}'s world%")
        broadcast "&4&lGENRES &8| &c%{_enemy}%&7 won a stick match against &c%{_p}%."
        toLobby({_enemy})
        addWinLoss({_enemy}, {_p})
    if metadata "state" of {_p} is "pearl":
        set {_enemy} to {enemy.%{_p}%}
        delete {enemy.%{_p}%}
        delete {enemy.%{_enemy}%}
        delete {lives.%{_p}%}
        delete {lives.%{_enemy}%}
        delete {loc.%{_p}%}
        delete {loc.%{_enemy}%}
        if "%{_p}'s world%" contains "%{_p}%":
            delWorld("%{_p}'s world%")
        broadcast "&4&lGENRES &8| &c%{_enemy}%&7 won a pearl match against &c%{_p}%."
        toLobby({_enemy})
        addWinLoss({_enemy}, {_p})
    if metadata "state" of {_p} is "sumo":
        set {_enemy} to {enemy.%{_p}%}
        delete {enemy.%{_p}%}
        delete {enemy.%{_enemy}%}
        if "%{_p}'s world%" contains "%{_p}%":
            delWorld("%{_p}'s world%")
        broadcast "&4&lGENRES &8| &c%{_enemy}%&7 won a sumo match against &c%{_p}%."
        toLobby({_enemy})
        addWinLoss({_enemy}, {_p})
    if metadata "state" of {_p} is "classic":
        set {_enemy} to {enemy.%{_p}%}
        delete {enemy.%{_p}%}
        delete {enemy.%{_enemy}%}
        if "%{_p}'s world%" contains "%{_p}%":
            delWorld("%{_p}'s world%")
        broadcast "&4&lGENRES &8| &c%{_enemy}%&7 won a classic match against &c%{_p}%."
        toLobby({_enemy})
        addWinLoss({_enemy}, {_p})
    if metadata "state" of {_p} is "bedwars":
        set {_enemy} to {enemy.%{_p}%}
        delete {enemy.%{_p}%}
        delete {enemy.%{_enemy}%}
        delete {loc.%{_p}%}
        delete {loc.%{_enemy}%}
        delete {block.%{_p}%}
        delete {block.%{_enemy}%}
        if "%{_p}'s world%" contains "%{_p}%":
            delWorld("%{_p}'s world%")
        broadcast "&4&lGENRES &8| &c%{_enemy}%&7 won a bedwars match against &c%{_p}%."
        toLobby({_enemy})
        addWinLoss({_enemy}, {_p})
    toLobby({_p})
    


function clearBlocks(p: player):
    loop {-cleanup.%{_p}%::*}:
        set block at loop-value to air
    delete {-cleanup.%{_p}%::*}

function safeTeleport(p: player, l: location):
    set block at {_l} to air
    set block above block at {_l} to air
    teleport {_p} to {_l}

function clean(p: player):
    clear {_p}'s inventory
    set {_p}'s helmet to air
    set {_p}'s chestplate to air
    set {_p}'s leggings to air
    set {_p}'s boots to air
    heal {_p}
    feed {_p}

function updateScoreboard(p: player):
    set {_u} to {_u}
    set title of scoreboard of {_p} to "&4&lGENRES&7&o (%number of players%)"
    set line 15 of scoreboard of {_p} to "&8&m----------------"
    set line 14 of scoreboard of {_p} to "&7Wins: &f%{wins::%{_u}%} ? 0%"
    set line 13 of scoreboard of {_p} to "&7Losses: &f%{losses::%{_u}%} ? 0%"
    set line 12 of scoreboard of {_p} to "&7W/L: &f%{wins::%{_u}%}/{losses::%{_u}%}%"
    set line 11 of scoreboard of {_p} to ""
    set line 10 of scoreboard of {_p} to "&7&ogenres.minehut.gg"
    set line 9 of scoreboard of {_p} to "&8&m----------------"

function check_personal(p: player, m: text, t: timespan):
    set {_u} to {_u}
    if {%{_m}%::%{_u}%} is not set:
        set {%{_m}%::%{_u}%} to {_t}
        send "&6&lPERSONAL BEST!" to {_p}
    if {%{_m}%::%{_u}%} > {_t}:
        set {%{_m}%::%{_u}%} to {_t}
        send "&6&lPERSONAL BEST!" to {_p}
